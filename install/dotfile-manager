#!/bin/bash
# Dotfiles Manager - Install/Uninstall dotfiles using stow
# Usage: dotfiles-manager <install|uninstall>

set -e

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
DOTFILES_SRC="$PROJECT_ROOT/dotfiles"
DOTFILES_TARGET="$HOME/.dotfiles"

# Print functions
print_step() {
    echo -e "\n${BLUE}==>${NC} ${YELLOW}$1${NC}"
}

print_substep() {
    echo -e "  ${PURPLE}->${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[OK]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check required tools
check_tools() {
    for tool in stow rsync git; do
        if ! command -v "$tool" &> /dev/null; then
            print_error "$tool is not installed. Please install it."
            exit 1
        fi
    done
}

# Install function
install_dotfiles() {
    print_step "Installing dotfiles using stow"

    # Check required tools
    check_tools

    if [ ! -d "$DOTFILES_SRC" ]; then
        print_error "Source directory not found: $DOTFILES_SRC"
        exit 1
    fi

    # Create and enter target directory
    mkdir -p "$DOTFILES_TARGET"
    cd "$DOTFILES_TARGET" || exit 1

    # Initialize Git repository if needed
    local git_initiated=false
    if [ ! -d ".git" ]; then
        print_substep "Initializing Git repository in $DOTFILES_TARGET"
        if git init >/dev/null 2>&1; then
            print_success "Git repository initialized"
            git_initiated=true
        else
            print_error "Failed to initialize Git"
            exit 1
        fi
    fi

    # Configure Git to ignore file mode changes
    if [ -d ".git" ]; then
        print_substep "Configuring Git (ignore file mode changes)"
        git config core.filemode false
        print_success "Git configured"
    fi

    # Sync dotfiles using rsync
    print_substep "Syncing dotfiles to $DOTFILES_TARGET"
    # rsync -a -u: only update files that are older in target
    if rsync -a -u "$DOTFILES_SRC/" "$DOTFILES_TARGET/"; then
        print_success "Dotfiles synced"
    else
        print_error "Failed to sync dotfiles"
        exit 1
    fi

    # Initial commit if needed
    if [ -d ".git" ]; then
        if [ "$git_initiated" = true ] || [ "$(git rev-list --count HEAD 2>/dev/null || echo 0)" -eq 0 ]; then
            print_substep "Creating initial commit"
            git add .
            if git commit -m "Initial commit of dotfiles" >/dev/null 2>&1; then
                print_success "Initial commit created"
            else
                print_warning "No changes to commit"
            fi
        fi
    fi

    # Unstow first (cleanup previous links)
    print_substep "Cleaning up previous stow links"
    stow -D -t "$HOME" . 2>/dev/null || true
    print_success "Previous links cleaned"

    # Check for conflicts
    print_substep "Checking for conflicts"
    if ! stow -n -t "$HOME" . 2>&1 | grep -q "would cause conflicts"; then
        print_success "No conflicts detected"
    else
        print_warning "Conflicts detected, attempting to resolve"
        # Remove conflicting files/symlinks
        stow -n -t "$HOME" . 2>&1 | grep "existing target" | \
            sed 's/.*existing target //' | sed 's/ since.*//' | \
            while read -r conflict; do
                local target="$HOME/$conflict"
                if [ -e "$target" ] && [ ! -d "$target" ]; then
                    print_warning "Removing conflict: $conflict"
                    rm -f "$target"
                fi
            done
    fi

    # Stow the dotfiles
    print_substep "Deploying dotfiles with stow"
    if stow -t "$HOME" .; then
        print_success "Dotfiles deployed: ~/.dotfiles/* -> ~/"
    else
        print_error "Failed to stow dotfiles"
        exit 1
    fi

    # Check for dynamic changes
    print_substep "Checking for dynamic changes"
    if [ -d ".git" ]; then
        if ! git diff-index --quiet HEAD -- 2>/dev/null; then
            print_warning "Dynamic changes detected"
            print_info "Review changes with: cd ~/.dotfiles && git status"
        else
            print_success "No dynamic changes"
        fi
    fi

    echo
    print_success "Dotfiles installation completed!"
}

# Uninstall function
uninstall_dotfiles() {
    print_step "Uninstalling dotfiles"

    if [ ! -d "$DOTFILES_TARGET" ]; then
        print_warning "Dotfiles directory does not exist: $DOTFILES_TARGET"
        exit 0
    fi

    # Check stow is installed
    if ! command -v stow &> /dev/null; then
        print_error "stow is not installed"
        exit 1
    fi

    # Unstow dotfiles
    cd "$DOTFILES_TARGET" || exit 1
    print_substep "Removing stow links from $HOME"

    if stow -D -t "$HOME" . 2>/dev/null; then
        print_success "Dotfiles unstowed"
    else
        print_warning "Some links may not have been removed"
    fi

    echo
    print_success "Dotfiles uninstalled!"
    print_info "Dotfiles directory still exists at: $DOTFILES_TARGET"
    print_info "To completely remove: rm -rf $DOTFILES_TARGET"
}

# Show usage
usage() {
    echo "Usage: $0 <install|uninstall>"
    echo
    echo "Commands:"
    echo "  install     Install dotfiles using stow"
    echo "              - Syncs dotfiles/ to ~/.dotfiles using rsync"
    echo "              - Creates Git repository for tracking changes"
    echo "              - Uses stow to create symlinks in \$HOME"
    echo
    echo "  uninstall   Uninstall dotfiles"
    echo "              - Removes all stow symlinks from \$HOME"
    echo "              - Keeps ~/.dotfiles directory intact"
    echo
    echo "Required tools: stow, rsync, git"
    echo
    echo "Example:"
    echo "  $0 install"
    echo "  $0 uninstall"
}

# Main
main() {
    if [ $# -eq 0 ]; then
        print_error "No command specified"
        echo
        usage
        exit 1
    fi

    local command="$1"

    case "$command" in
        install)
            install_dotfiles
            ;;
        uninstall)
            uninstall_dotfiles
            ;;
        -h|--help|help)
            usage
            ;;
        *)
            print_error "Unknown command: $command"
            echo
            usage
            exit 1
            ;;
    esac
}

main "$@"
