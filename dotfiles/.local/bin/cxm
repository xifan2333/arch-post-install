#!/bin/bash

# cxm - Codex API Provider Manager
# Manages third-party API configurations for Codex CLI

set -e

# XDG Base Directory Specification
XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
CONFIG_DIR="$XDG_CONFIG_HOME/codex"
PROVIDERS_FILE="$CONFIG_DIR/providers"
CODEX_HOME="$HOME/.codex"
CODEX_CONFIG="$CODEX_HOME/config.toml"
AUTH_JSON="$CODEX_HOME/auth.json"

# Ensure config directories exist
mkdir -p "$CONFIG_DIR"
mkdir -p "$CODEX_HOME"

# Create default providers file if not exists
init_providers_file() {
    cat > "$PROVIDERS_FILE" << 'EOF'
# Codex API Provider Configuration
# Single-line format per provider:
# name url key model type
# - name: identifier (e.g., openai, azure)
# - url: API base URL
# - key: API key string
# - model: default model name (e.g., gpt-5)
# - type: responses|chat

# example https://api.example.com/v1 sk-xxxxxxxx gpt-5 responses
EOF
}

get_provider_fields() {
    local provider="$1"
    local line_name url api_key model wire_api
    while IFS=' ' read -r line_name url api_key model wire_api; do
        [[ -z "$line_name" || "$line_name" =~ ^# ]] && continue
        if [[ "$line_name" == "$provider" ]]; then
            echo "$url|$api_key|$model|$wire_api"
            return 0
        fi
    done < "$PROVIDERS_FILE"
    return 1
}

get_current_provider() {
    # Get from environment variable only
    echo "${CODEX_PROVIDER:-}"
}

ensure_source_in_shell() {
    local env_file="$1"
    local env_fish="$2"

    # For bash/zsh
    for rc_file in "$HOME/.bashrc" "$HOME/.zshrc"; do
        if [[ -f "$rc_file" || -L "$rc_file" ]]; then
            # Resolve symlink if exists
            local target_file="$rc_file"
            if [[ -L "$rc_file" ]]; then
                target_file=$(readlink -f "$rc_file")
            fi

            # Check if source statement already exists
            if ! grep -qF "source \"$env_file\"" "$target_file" 2>/dev/null; then
                echo "" >> "$target_file"
                echo "# Codex Config Manager - auto-generated" >> "$target_file"
                echo "[[ -f \"$env_file\" ]] && source \"$env_file\"" >> "$target_file"
            fi
        fi
    done

    # For fish
    local fish_config="$HOME/.config/fish/config.fish"
    if [[ -f "$fish_config" || -L "$fish_config" ]]; then
        # Resolve symlink if exists
        local target_file="$fish_config"
        if [[ -L "$fish_config" ]]; then
            target_file=$(readlink -f "$fish_config")
        fi

        # Check if source statement already exists
        if ! grep -qF "source \"$env_fish\"" "$target_file" 2>/dev/null; then
            echo "" >> "$target_file"
            echo "# Codex Config Manager - auto-generated" >> "$target_file"
            echo "test -f \"$env_fish\"; and source \"$env_fish\"" >> "$target_file"
        fi
    fi
}

list_configs() {
    local current
    current=$(get_current_provider)
    local line_name url model wire_api api_key marker
    echo "Available API providers:"
    echo ""
    while IFS=' ' read -r line_name url api_key model wire_api; do
        [[ -z "$line_name" || "$line_name" =~ ^# ]] && continue
        marker=" "
        [[ "$line_name" == "$current" ]] && marker="*"
        printf "%s %-15s %-45s %s\n" "$marker" "$line_name" "${url:-<no url>}" "${model:-<no model>}"
    done < "$PROVIDERS_FILE"
    echo ""
    if [[ -z "$current" ]]; then
        echo "No provider selected. Use: cxm use <name>"
    else
        echo "Current: $current"
    fi
}

generate_config() {
    local provider="$1"
    local fields
    if ! fields=$(get_provider_fields "$provider"); then
        echo "Error: Provider '$provider' not found" >&2
        return 1
    fi

    local base_url api_key model wire_api
    base_url="${fields%%|*}"; fields="${fields#*|}"
    api_key="${fields%%|*}"; fields="${fields#*|}"
    model="${fields%%|*}"; fields="${fields#*|}"
    wire_api="$fields"

    model="${model:-gpt-5}"
    wire_api="${wire_api:-responses}"

    if [[ -z "$base_url" ]]; then
        echo "Error: url not found for provider '$provider'" >&2
        return 1
    fi
    if [[ -z "$api_key" ]]; then
        echo "Error: key not found for provider '$provider'" >&2
        return 1
    fi

    cat > "$CODEX_CONFIG" << EOF
# Codex configuration - managed by cxm
# Current provider: $provider

model = "$model"
model_provider = "$provider"

[model_providers.$provider]
name = "$provider"
base_url = "$base_url"
wire_api = "$wire_api"
EOF

    cat > "$AUTH_JSON" << EOF
{
  "OPENAI_API_KEY": "$api_key"
}
EOF
    chmod 600 "$AUTH_JSON"
}

show_help() {
    cat << EOF
cxm - Codex API Provider Manager

USAGE:
    cxm <command> [options]

COMMANDS:
    init                    Create template providers file
    add                     Add new provider interactively
    rm <name>               Remove a provider
    ls                      List all API providers
    use <name>              Switch to provider and update config
    edit                    Edit providers file with nvim
    show                    Show current config.toml
    help                    Show this help message

WORKFLOW:
    1. cxm init             # Create template
    2. cxm add              # Add provider interactively
       OR
       cxm edit             # Edit config file directly
    3. cxm ls               # List providers
    4. cxm use <name>       # Switch provider
    5. codex                # Start using Codex

CONFIG FILES:
    Providers:  $PROVIDERS_FILE
    Codex:      $CODEX_CONFIG
    Auth:       $AUTH_JSON
    Env:        $CONFIG_DIR/env
    Fish Env:   $CONFIG_DIR/env.fish

EXAMPLES:
    # Add a new provider interactively
    cxm add

    # Remove a provider
    cxm rm deepseek

    # Switch to a provider
    cxm use openrouter
    codex

    # Edit providers file
    cxm edit

    # List all providers
    cxm ls
EOF
}

# Main command handling
case "${1:-}" in
    "init")
    if [[ -f "$PROVIDERS_FILE" ]]; then
            echo "Providers file already exists: $PROVIDERS_FILE"
            echo "Use 'cxm edit' to modify it"
        else
            init_providers_file
            echo "Created template: $PROVIDERS_FILE"
            echo "Edit it with: cxm edit"
        fi
        ;;

    "ls"|"list")
        if [[ ! -f "$PROVIDERS_FILE" ]]; then
            echo "No providers file found. Run: cxm init"
            exit 1
        fi
        list_configs
        ;;

    "use")
        if [[ $# -ne 2 ]]; then
            echo "Usage: cxm use <provider>" >&2
            exit 1
        fi

        provider="$2"

        # Check if provider exists
        if ! get_provider_fields "$provider" >/dev/null; then
            echo "Error: Provider '$provider' not found" >&2
            echo "Use 'cxm ls' to see available providers" >&2
            exit 1
        fi

        # Generate configs
        if generate_config "$provider"; then
            # Export to current session immediately
            export CODEX_PROVIDER="$provider"

            # Write environment variables to env (for bash/zsh)
            ENV_FILE="$CONFIG_DIR/env"
            cat > "$ENV_FILE" << EOF
# Codex Configuration - managed by cxm
# Current provider: $provider
# DO NOT commit this file to git - contains sensitive API keys

export CODEX_PROVIDER="$provider"
EOF
            chmod 600 "$ENV_FILE"

            # Write environment variables to env.fish (for fish shell)
            ENV_FISH="$CONFIG_DIR/env.fish"
            cat > "$ENV_FISH" << EOF
# Codex Configuration - managed by cxm
# Current provider: $provider
# DO NOT commit this file to git - contains sensitive API keys

set -gx CODEX_PROVIDER "$provider"
EOF
            chmod 600 "$ENV_FISH"

            # Ensure shell configs source the env files
            ensure_source_in_shell "$ENV_FILE" "$ENV_FISH"

            echo "Switched to '$provider'"
            echo "Codex config updated. Restart Codex to apply changes."
        fi
        ;;

    "add")
        echo "Add new API provider"
        echo ""

        read -r -e -p "Provider name: " name
        if [[ -z "$name" ]]; then
            echo "Error: Provider name is required" >&2
            exit 1
        fi

        # Check if provider already exists
        if get_provider_fields "$name" >/dev/null; then
            echo "Error: Provider '$name' already exists" >&2
            exit 1
        fi

        read -r -e -p "Base URL: " base_url
        if [[ -z "$base_url" ]]; then
            echo "Error: Base URL is required" >&2
            exit 1
        fi

        read -r -e -p "API Key: " api_key
        if [[ -z "$api_key" ]]; then
            echo "Error: API Key is required" >&2
            exit 1
        fi

        read -r -e -p "Model [gpt-5]: " model
        model="${model:-gpt-5}"

        read -r -e -p "Wire API (responses/chat) [responses]: " wire_api
        wire_api="${wire_api:-responses}"

        # Append to providers file (single line: name url key model type)
        printf "%s %s %s %s %s\n" "$name" "$base_url" "$api_key" "$model" "$wire_api" >> "$PROVIDERS_FILE"

        echo ""
        echo "Added provider '$name'"
        echo "Use: cxm use $name"
        ;;

    "rm")
        if [[ $# -ne 2 ]]; then
            echo "Usage: cxm rm <provider>" >&2
            exit 1
        fi

        provider="$2"

        # Check if provider exists
        if ! get_provider_fields "$provider" >/dev/null; then
            echo "Error: Provider '$provider' not found" >&2
            exit 1
        fi

        # Remove the matching line (preserve comments/blank lines)
        tmp_file=$(mktemp)
        awk -v n="$provider" '
            $0 ~ /^\s*#/ { print; next }
            NF==0 { print; next }
            $1==n { next }
            { print }
        ' "$PROVIDERS_FILE" > "$tmp_file" && mv "$tmp_file" "$PROVIDERS_FILE"

        # If it's the current provider, clear env files
        current=$(get_current_provider)
        if [[ "$current" == "$provider" ]]; then
            # Unset environment variables in current session
            unset CODEX_PROVIDER

            # Remove environment variable files
            ENV_FILE="$CONFIG_DIR/env"
            ENV_FISH="$CONFIG_DIR/env.fish"

            rm -f "$ENV_FILE" "$ENV_FISH"

            echo "Removed '$provider' (was current)"
            echo "Environment cleared. Restart Codex to apply changes."
        else
            echo "Removed '$provider'"
        fi
        ;;

    "edit")
        if [[ ! -f "$PROVIDERS_FILE" ]]; then
            init_providers_file
        fi

        if command -v nvim >/dev/null 2>&1; then
            nvim "$PROVIDERS_FILE"
        elif command -v vim >/dev/null 2>&1; then
            vim "$PROVIDERS_FILE"
        elif command -v nano >/dev/null 2>&1; then
            nano "$PROVIDERS_FILE"
        elif [[ -n "$EDITOR" ]]; then
            "$EDITOR" "$PROVIDERS_FILE"
        elif [[ -n "$VISUAL" ]]; then
            "$VISUAL" "$PROVIDERS_FILE"
        else
            echo "Error: No editor found. Please install nvim, vim, nano, or set EDITOR/VISUAL:" >&2
            echo "$PROVIDERS_FILE" >&2
            exit 1
        fi
        ;;

    "show")
        if [[ -f "$CODEX_CONFIG" ]]; then
            cat "$CODEX_CONFIG"
        else
            echo "No config.toml found"
            echo "Use: cxm use <provider>"
        fi
        ;;

    "help"|"-h"|"--help")
        show_help
        ;;

    "")
        current=$(get_current_provider)
        if [[ -n "$current" ]]; then
            echo "Current provider: $current"
        else
            echo "No provider selected"
            echo "Use: cxm help"
        fi
        ;;

    *)
        echo "Error: Unknown command '$1'" >&2
        echo "Use: cxm help" >&2
        exit 1
        ;;
esac
